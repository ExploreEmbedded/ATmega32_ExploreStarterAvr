
07b-Adc_RawValue_Voltage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ae8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000ae8  00000b5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bb4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000846  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000438  00000000  00000000  0000150e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000468  00000000  00000000  00001946  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000268  00000000  00000000  00001db0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cd  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d85  00000000  00000000  000023e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  0000316a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <main>
  7a:	0c 94 72 05 	jmp	0xae4	; 0xae4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:
 * description :This function initializes the ADC module.

***************************************************************************************************/
void ADC_Init()
 {
   ADCSRA=(1<<ADEN) | (1<<ADPS0); /* Enable ADC , sampling freq=osc_freq/2 */
  82:	81 e8       	ldi	r24, 0x81	; 129
  84:	86 b9       	out	0x06, r24	; 6
   ADMUX=0x00;                    /* Result right justified, select channel zero */
  86:	17 b8       	out	0x07, r1	; 7
  88:	08 95       	ret

0000008a <ADC_GetAdcValue>:
				 For AVR/PIC(10-bit adc) the adc value per lsb will be 5/1023=0048v
***************************************************************************************************/				 
uint16_t ADC_GetAdcValue(uint8_t v_adcChannel_u8)
 {
   
   ADMUX = v_adcChannel_u8;               /* Select the required channel */
  8a:	87 b9       	out	0x07, r24	; 7
   DELAY_us(10);                          /* Wait for some time for the channel to get selected */
  8c:	8a e0       	ldi	r24, 0x0A	; 10
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	0e 94 55 00 	call	0xaa	; 0xaa <DELAY_us>
   util_BitSet(ADCSRA,ADSC);              /* Start the ADC conversion by setting ADSC bit */
  94:	36 9a       	sbi	0x06, 6	; 6
   
   while(util_IsBitCleared(ADCSRA,ADIF)); /* Wait till the conversion is over */
  96:	34 9b       	sbis	0x06, 4	; 6
  98:	fe cf       	rjmp	.-4      	; 0x96 <ADC_GetAdcValue+0xc>
                                          /* ADIF will be set once ADC conversion is complete */
										  util_BitSet(ADCSRA,ADIF);
  9a:	34 9a       	sbi	0x06, 4	; 6
	DELAY_us(100); 							
  9c:	84 e6       	ldi	r24, 0x64	; 100
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 55 00 	call	0xaa	; 0xaa <DELAY_us>
     return(ADCW);                        /* Return the 10-bit result */
  a4:	84 b1       	in	r24, 0x04	; 4
  a6:	95 b1       	in	r25, 0x05	; 5
 }
  a8:	08 95       	ret

000000aa <DELAY_us>:
         if 5000 is passed as the argument then it generates a delay of 5ms.		  

 ***************************************************************************************************/
void DELAY_us(uint16_t us_count) 
{
    while (us_count != 0) 
  aa:	00 97       	sbiw	r24, 0x00	; 0
  ac:	31 f0       	breq	.+12     	; 0xba <DELAY_us+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	25 e0       	ldi	r18, 0x05	; 5
  b0:	2a 95       	dec	r18
  b2:	f1 f7       	brne	.-4      	; 0xb0 <DELAY_us+0x6>
  b4:	00 00       	nop
    {
        _delay_us(1);
		us_count--;
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f8 cf       	rjmp	.-16     	; 0xaa <DELAY_us>
    }
}
  ba:	08 95       	ret

000000bc <UART_SetBaudRate>:
                 the default baudrate of 9600 is set.

		    Refer uart.h file for Supported range of baud rates.
***************************************************************************************************/
void UART_SetBaudRate(uint32_t v_baudRate_u32)
{
  bc:	cf 92       	push	r12
  be:	df 92       	push	r13
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	6b 01       	movw	r12, r22
  c6:	7c 01       	movw	r14, r24
	uint16_t RegValue;

	if((v_baudRate_u32 >= C_MinBaudRate_U32) && (v_baudRate_u32<=C_MaxBaudRate_U32))
  c8:	dc 01       	movw	r26, r24
  ca:	cb 01       	movw	r24, r22
  cc:	80 56       	subi	r24, 0x60	; 96
  ce:	99 40       	sbci	r25, 0x09	; 9
  d0:	a1 09       	sbc	r26, r1
  d2:	b1 09       	sbc	r27, r1
  d4:	81 3a       	cpi	r24, 0xA1	; 161
  d6:	98 4b       	sbci	r25, 0xB8	; 184
  d8:	a1 40       	sbci	r26, 0x01	; 1
  da:	b1 05       	cpc	r27, r1
  dc:	98 f4       	brcc	.+38     	; 0x104 <UART_SetBaudRate+0x48>
	{
		/* Check if the requested baudate is within range,
	     If yes then calculate the value to be loaded into baud rate generator. */
		RegValue = M_GetBaudRateGeneratorValue(v_baudRate_u32);
  de:	a8 ef       	ldi	r26, 0xF8	; 248
  e0:	bf ef       	ldi	r27, 0xFF	; 255
  e2:	a7 01       	movw	r20, r14
  e4:	96 01       	movw	r18, r12
  e6:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__mulohisi3>
  ea:	7c 5d       	subi	r23, 0xDC	; 220
  ec:	8b 40       	sbci	r24, 0x0B	; 11
  ee:	9f 4f       	sbci	r25, 0xFF	; 255
  f0:	e4 e0       	ldi	r30, 0x04	; 4
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	44 1f       	adc	r20, r20
  f8:	55 1f       	adc	r21, r21
  fa:	ea 95       	dec	r30
  fc:	d1 f7       	brne	.-12     	; 0xf2 <UART_SetBaudRate+0x36>
  fe:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__udivmodsi4>
 102:	02 c0       	rjmp	.+4      	; 0x108 <UART_SetBaudRate+0x4c>
	}
	else
	{
		/*	 Invalid baudrate requested, hence set it to default baudrate of 9600 */
		RegValue = M_GetBaudRateGeneratorValue(9600);
 104:	27 e6       	ldi	r18, 0x67	; 103
 106:	30 e0       	ldi	r19, 0x00	; 0
	}

	UBRRL = util_ExtractByte0to8(RegValue);
 108:	29 b9       	out	0x09, r18	; 9
	UBRRH = util_ExtractByte8to16(RegValue);
 10a:	30 bd       	out	0x20, r19	; 32
}
 10c:	ff 90       	pop	r15
 10e:	ef 90       	pop	r14
 110:	df 90       	pop	r13
 112:	cf 90       	pop	r12
 114:	08 95       	ret

00000116 <UART_Init>:

		    Refer uart.h file for Supported(range) baud rates.		
***************************************************************************************************/
void UART_Init(uint32_t v_baudRate_u32)
{
	UCSRB= (1<<RXEN) | (1<<TXEN);                  // Enable Receiver and Transmitter
 116:	28 e1       	ldi	r18, 0x18	; 24
 118:	2a b9       	out	0x0a, r18	; 10
	UCSRC= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);   // Asynchronous mode 8-bit data and 1-stop bit
 11a:	26 e8       	ldi	r18, 0x86	; 134
 11c:	20 bd       	out	0x20, r18	; 32
	UCSRA= 0x00;                                   // Clear the UASRT status register
 11e:	1b b8       	out	0x0b, r1	; 11
	UART_SetBaudRate(v_baudRate_u32);
 120:	0c 94 5e 00 	jmp	0xbc	; 0xbc <UART_SetBaudRate>

00000124 <UART_TxChar>:

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char v_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
 124:	5d 9b       	sbis	0x0b, 5	; 11
 126:	fe cf       	rjmp	.-4      	; 0x124 <UART_TxChar>
	UDR =v_uartData_u8;                              // Load the data to be transmitted
 128:	8c b9       	out	0x0c, r24	; 12
 12a:	08 95       	ret

0000012c <UART_TxNumber.part.0>:
                7.(0x12AB,3) then 3-digits ie. 2AB will be transmitted
                8.(0x12AB,6) then 6-digits ie. 0012AB will be transmitted
                9.(0x12AB,C_DefaultDigitsToTransmit_U8) then 12AB will be transmitted.    
 ***************************************************************************************************/
#if ((Enable_UART_TxNumber==1) || (Enable_UART_TxFloatNumber==1) || (Enable_UART_Printf == 1))
void UART_TxNumber(uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigitsToTransmit_u8)
 12c:	af 92       	push	r10
 12e:	bf 92       	push	r11
 130:	cf 92       	push	r12
 132:	df 92       	push	r13
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	1f 92       	push	r1
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	6b 01       	movw	r12, r22
 148:	7c 01       	movw	r14, r24
    {
        while(v_numOfDigitsToTransmit_u8!=0)
        {
            /* Start Extracting the bits from the specified bit positions.
             Get the Acsii values of the bits and transmit */
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToTransmit_u8-1));
 14a:	aa 24       	eor	r10, r10
 14c:	a3 94       	inc	r10
 14e:	b1 2c       	mov	r11, r1
{
    uint8_t i=0,a[10];

    if(C_BINARY_U8 == v_numericSystem_u8)
    {
        while(v_numOfDigitsToTransmit_u8!=0)
 150:	44 23       	and	r20, r20
 152:	e9 f0       	breq	.+58     	; 0x18e <UART_TxNumber.part.0+0x62>
        {
            /* Start Extracting the bits from the specified bit positions.
             Get the Acsii values of the bits and transmit */
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToTransmit_u8-1));
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	84 0f       	add	r24, r20
 158:	85 01       	movw	r16, r10
 15a:	02 c0       	rjmp	.+4      	; 0x160 <UART_TxNumber.part.0+0x34>
 15c:	00 0f       	add	r16, r16
 15e:	11 1f       	adc	r17, r17
 160:	8a 95       	dec	r24
 162:	e2 f7       	brpl	.-8      	; 0x15c <UART_TxNumber.part.0+0x30>
 164:	01 2e       	mov	r0, r17
 166:	00 0c       	add	r0, r0
 168:	22 0b       	sbc	r18, r18
 16a:	33 0b       	sbc	r19, r19
 16c:	0c 21       	and	r16, r12
 16e:	1d 21       	and	r17, r13
 170:	2e 21       	and	r18, r14
 172:	3f 21       	and	r19, r15
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	01 2b       	or	r16, r17
 178:	02 2b       	or	r16, r18
 17a:	03 2b       	or	r16, r19
 17c:	09 f4       	brne	.+2      	; 0x180 <UART_TxNumber.part.0+0x54>
 17e:	80 e0       	ldi	r24, 0x00	; 0
            UART_TxChar(util_Dec2Ascii(i));
 180:	80 5d       	subi	r24, 0xD0	; 208
 182:	49 83       	std	Y+1, r20	; 0x01
 184:	0e 94 92 00 	call	0x124	; 0x124 <UART_TxChar>
            v_numOfDigitsToTransmit_u8--;
 188:	49 81       	ldd	r20, Y+1	; 0x01
 18a:	41 50       	subi	r20, 0x01	; 1
 18c:	e1 cf       	rjmp	.-62     	; 0x150 <UART_TxNumber.part.0+0x24>
            i--;
        }
    }


}
 18e:	0f 90       	pop	r0
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	df 90       	pop	r13
 19e:	cf 90       	pop	r12
 1a0:	bf 90       	pop	r11
 1a2:	af 90       	pop	r10
 1a4:	08 95       	ret

000001a6 <UART_TxString>:
               1.The ptr_string points to the first char of the string
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if ((Enable_UART_TxString==1)|| (Enable_UART_Printf == 1))
void UART_TxString(char *ptr_string)
{
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	ec 01       	movw	r28, r24
	while(*ptr_string)
 1ac:	89 91       	ld	r24, Y+
 1ae:	88 23       	and	r24, r24
 1b0:	19 f0       	breq	.+6      	; 0x1b8 <UART_TxString+0x12>
		UART_TxChar(*ptr_string++);// Loop through the string and transmit char by char
 1b2:	0e 94 92 00 	call	0x124	; 0x124 <UART_TxChar>
 1b6:	fa cf       	rjmp	.-12     	; 0x1ac <UART_TxString+0x6>
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <UART_TxNumber>:
                8.(0x12AB,6) then 6-digits ie. 0012AB will be transmitted
                9.(0x12AB,C_DefaultDigitsToTransmit_U8) then 12AB will be transmitted.    
 ***************************************************************************************************/
#if ((Enable_UART_TxNumber==1) || (Enable_UART_TxFloatNumber==1) || (Enable_UART_Printf == 1))
void UART_TxNumber(uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigitsToTransmit_u8)
{
 1be:	4f 92       	push	r4
 1c0:	5f 92       	push	r5
 1c2:	6f 92       	push	r6
 1c4:	7f 92       	push	r7
 1c6:	bf 92       	push	r11
 1c8:	cf 92       	push	r12
 1ca:	df 92       	push	r13
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	2a 97       	sbiw	r28, 0x0a	; 10
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	f8 94       	cli
 1e2:	de bf       	out	0x3e, r29	; 62
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	cd bf       	out	0x3d, r28	; 61
 1e8:	b8 2e       	mov	r11, r24
 1ea:	cb 01       	movw	r24, r22
 1ec:	ba 01       	movw	r22, r20
 1ee:	02 2f       	mov	r16, r18
    uint8_t i=0,a[10];

    if(C_BINARY_U8 == v_numericSystem_u8)
 1f0:	22 e0       	ldi	r18, 0x02	; 2
 1f2:	b2 12       	cpse	r11, r18
 1f4:	16 c0       	rjmp	.+44     	; 0x222 <UART_TxNumber+0x64>
 1f6:	40 2f       	mov	r20, r16
            i--;
        }
    }


}
 1f8:	2a 96       	adiw	r28, 0x0a	; 10
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	0f be       	out	0x3f, r0	; 63
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	ff 90       	pop	r15
 20e:	ef 90       	pop	r14
 210:	df 90       	pop	r13
 212:	cf 90       	pop	r12
 214:	bf 90       	pop	r11
 216:	7f 90       	pop	r7
 218:	6f 90       	pop	r6
 21a:	5f 90       	pop	r5
 21c:	4f 90       	pop	r4
 21e:	0c 94 96 00 	jmp	0x12c	; 0x12c <UART_TxNumber.part.0>
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToTransmit_u8-1));
            UART_TxChar(util_Dec2Ascii(i));
            v_numOfDigitsToTransmit_u8--;
        }    
    }     
    else if(v_number_u32==0)
 222:	61 15       	cp	r22, r1
 224:	71 05       	cpc	r23, r1
 226:	81 05       	cpc	r24, r1
 228:	91 05       	cpc	r25, r1
 22a:	49 f0       	breq	.+18     	; 0x23e <UART_TxNumber+0x80>
 22c:	fe 01       	movw	r30, r28
 22e:	31 96       	adiw	r30, 0x01	; 1
 230:	6f 01       	movw	r12, r30
 232:	7f 01       	movw	r14, r30
                First get the remainder and divide the number by 10 each time.

                example for Decimal number:
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
 234:	4b 2c       	mov	r4, r11
 236:	51 2c       	mov	r5, r1
 238:	61 2c       	mov	r6, r1
 23a:	71 2c       	mov	r7, r1
 23c:	1e c0       	rjmp	.+60     	; 0x27a <UART_TxNumber+0xbc>
 23e:	10 e0       	ldi	r17, 0x00	; 0
        }    
    }     
    else if(v_number_u32==0)
    {
        /* If the number is zero then update the array with the same for transmitting */
        for(i=0;((i<v_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 240:	10 17       	cp	r17, r16
 242:	a1 f1       	breq	.+104    	; 0x2ac <UART_TxNumber+0xee>
 244:	1a 30       	cpi	r17, 0x0A	; 10
 246:	91 f1       	breq	.+100    	; 0x2ac <UART_TxNumber+0xee>
            UART_TxChar('0');
 248:	80 e3       	ldi	r24, 0x30	; 48
 24a:	0e 94 92 00 	call	0x124	; 0x124 <UART_TxChar>
        }    
    }     
    else if(v_number_u32==0)
    {
        /* If the number is zero then update the array with the same for transmitting */
        for(i=0;((i<v_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 24e:	1f 5f       	subi	r17, 0xFF	; 255
 250:	f7 cf       	rjmp	.-18     	; 0x240 <UART_TxNumber+0x82>
    {
        for(i=0;i<v_numOfDigitsToTransmit_u8;i++)
        {
            /* Continue extracting the digits from right side
               till the Specified v_numOfDigitsToTransmit_u8 */
            if(v_number_u32!=0)
 252:	61 15       	cp	r22, r1
 254:	71 05       	cpc	r23, r1
 256:	81 05       	cpc	r24, r1
 258:	91 05       	cpc	r25, r1
 25a:	a1 f0       	breq	.+40     	; 0x284 <UART_TxNumber+0xc6>
                First get the remainder and divide the number by 10 each time.

                example for Decimal number:
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
 25c:	16 2f       	mov	r17, r22
 25e:	a3 01       	movw	r20, r6
 260:	92 01       	movw	r18, r4
 262:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__udivmodsi4>
 266:	ca 01       	movw	r24, r20
 268:	b9 01       	movw	r22, r18
 26a:	b2 9e       	mul	r11, r18
 26c:	10 19       	sub	r17, r0
 26e:	11 24       	eor	r1, r1
 270:	f7 01       	movw	r30, r14
 272:	10 83       	st	Z, r17
 274:	ff ef       	ldi	r31, 0xFF	; 255
 276:	ef 1a       	sub	r14, r31
 278:	ff 0a       	sbc	r15, r31
 27a:	1e 2d       	mov	r17, r14
 27c:	1c 19       	sub	r17, r12
        for(i=0;((i<v_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
            UART_TxChar('0');
    }
    else
    {
        for(i=0;i<v_numOfDigitsToTransmit_u8;i++)
 27e:	10 17       	cp	r17, r16
 280:	40 f3       	brcs	.-48     	; 0x252 <UART_TxNumber+0x94>
 282:	0f c0       	rjmp	.+30     	; 0x2a2 <UART_TxNumber+0xe4>
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
                v_number_u32=v_number_u32/v_numericSystem_u8;
            }
            else if( (v_numOfDigitsToTransmit_u8 == C_DefaultDigitsToTransmit_U8) ||
 284:	0b 30       	cpi	r16, 0x0B	; 11
 286:	68 f4       	brcc	.+26     	; 0x2a2 <UART_TxNumber+0xe4>
            else
            {
                /*In case user expects more digits to be transmitted than the actual digits in number,
                  then update the remaining digits with zero.
                Ex: v_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
                a[i]=0;
 288:	f7 01       	movw	r30, r14
 28a:	10 82       	st	Z, r1
 28c:	f3 cf       	rjmp	.-26     	; 0x274 <UART_TxNumber+0xb6>
        }

        while(i)
        { 
            /* Finally get the ascii values of the digits and transmit*/
            UART_TxChar(util_Hex2Ascii(a[i-1]));
 28e:	fe 01       	movw	r30, r28
 290:	e1 0f       	add	r30, r17
 292:	f1 1d       	adc	r31, r1
 294:	80 81       	ld	r24, Z
 296:	8a 30       	cpi	r24, 0x0A	; 10
 298:	38 f0       	brcs	.+14     	; 0x2a8 <UART_TxNumber+0xea>
 29a:	89 5c       	subi	r24, 0xC9	; 201
 29c:	0e 94 92 00 	call	0x124	; 0x124 <UART_TxChar>
            i--;
 2a0:	11 50       	subi	r17, 0x01	; 1
                Ex: v_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
                a[i]=0;
            }
        }

        while(i)
 2a2:	11 11       	cpse	r17, r1
 2a4:	f4 cf       	rjmp	.-24     	; 0x28e <UART_TxNumber+0xd0>
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <UART_TxNumber+0xee>
        { 
            /* Finally get the ascii values of the digits and transmit*/
            UART_TxChar(util_Hex2Ascii(a[i-1]));
 2a8:	80 5d       	subi	r24, 0xD0	; 208
 2aa:	f8 cf       	rjmp	.-16     	; 0x29c <UART_TxNumber+0xde>
            i--;
        }
    }


}
 2ac:	2a 96       	adiw	r28, 0x0a	; 10
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	f8 94       	cli
 2b2:	de bf       	out	0x3e, r29	; 62
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	cd bf       	out	0x3d, r28	; 61
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	ff 90       	pop	r15
 2c2:	ef 90       	pop	r14
 2c4:	df 90       	pop	r13
 2c6:	cf 90       	pop	r12
 2c8:	bf 90       	pop	r11
 2ca:	7f 90       	pop	r7
 2cc:	6f 90       	pop	r6
 2ce:	5f 90       	pop	r5
 2d0:	4f 90       	pop	r4
 2d2:	08 95       	ret

000002d4 <UART_TxFloatNumber>:
         Float will be disabled by default as it takes huge controller resources
	     It can be enabled by changing value of Enable_UART_TxFloatNumber to 1 in uart.h	 
 ***************************************************************************************************/
#if (Enable_UART_TxFloatNumber==1)
void UART_TxFloatNumber(float v_floatNumber_f32)
{
 2d4:	8f 92       	push	r8
 2d6:	9f 92       	push	r9
 2d8:	af 92       	push	r10
 2da:	bf 92       	push	r11
 2dc:	cf 92       	push	r12
 2de:	df 92       	push	r13
 2e0:	ef 92       	push	r14
 2e2:	ff 92       	push	r15
 2e4:	6b 01       	movw	r12, r22
 2e6:	7c 01       	movw	r14, r24
      1.Type cast the number to int to get the integer part.
	  2.transmit the extracted integer part followed by a decimal point(.).
	  3.Later the integer part is made zero by subtracting with the extracted integer value.
	  4.Finally the fractional part is multiplied by 100000 to support 6-digit precision */

	v_tempNumber_u32 = (uint32_t) v_floatNumber_f32;
 2e8:	0e 94 04 04 	call	0x808	; 0x808 <__fixunssfsi>
 2ec:	4b 01       	movw	r8, r22
 2ee:	5c 01       	movw	r10, r24
	UART_TxNumber(C_DECIMAL_U8,v_tempNumber_u32,C_DefaultDigitsToTransmit_U8);
 2f0:	2f ef       	ldi	r18, 0xFF	; 255
 2f2:	ab 01       	movw	r20, r22
 2f4:	bc 01       	movw	r22, r24
 2f6:	8a e0       	ldi	r24, 0x0A	; 10
 2f8:	0e 94 df 00 	call	0x1be	; 0x1be <UART_TxNumber>

	UART_TxChar('.');
 2fc:	8e e2       	ldi	r24, 0x2E	; 46
 2fe:	0e 94 92 00 	call	0x124	; 0x124 <UART_TxChar>

	v_floatNumber_f32 = v_floatNumber_f32 - v_tempNumber_u32;
 302:	c5 01       	movw	r24, r10
 304:	b4 01       	movw	r22, r8
 306:	0e 94 33 04 	call	0x866	; 0x866 <__floatunsisf>
 30a:	9b 01       	movw	r18, r22
 30c:	ac 01       	movw	r20, r24
 30e:	c7 01       	movw	r24, r14
 310:	b6 01       	movw	r22, r12
 312:	0e 94 25 03 	call	0x64a	; 0x64a <__subsf3>
	v_tempNumber_u32 = v_floatNumber_f32 * 1000000;
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	34 e2       	ldi	r19, 0x24	; 36
 31a:	44 e7       	ldi	r20, 0x74	; 116
 31c:	59 e4       	ldi	r21, 0x49	; 73
 31e:	0e 94 c1 04 	call	0x982	; 0x982 <__mulsf3>
 322:	0e 94 04 04 	call	0x808	; 0x808 <__fixunssfsi>
 326:	ab 01       	movw	r20, r22
 328:	bc 01       	movw	r22, r24
	UART_TxNumber(C_DECIMAL_U8,v_tempNumber_u32,C_DefaultDigitsToTransmit_U8);
 32a:	2f ef       	ldi	r18, 0xFF	; 255
 32c:	8a e0       	ldi	r24, 0x0A	; 10
}
 32e:	ff 90       	pop	r15
 330:	ef 90       	pop	r14
 332:	df 90       	pop	r13
 334:	cf 90       	pop	r12
 336:	bf 90       	pop	r11
 338:	af 90       	pop	r10
 33a:	9f 90       	pop	r9
 33c:	8f 90       	pop	r8

	UART_TxChar('.');

	v_floatNumber_f32 = v_floatNumber_f32 - v_tempNumber_u32;
	v_tempNumber_u32 = v_floatNumber_f32 * 1000000;
	UART_TxNumber(C_DECIMAL_U8,v_tempNumber_u32,C_DefaultDigitsToTransmit_U8);
 33e:	0c 94 df 00 	jmp	0x1be	; 0x1be <UART_TxNumber>

00000342 <UART_Printf>:
        uint8_t v_Num_u8;
		UART_Printf("num1:%u",(uint16_t)v_Num_u8); 		 
***************************************************************************************************/
#if ( Enable_UART_Printf   == 1 ) 
void UART_Printf(const char *argList, ...)
{
 342:	cf 92       	push	r12
 344:	df 92       	push	r13
 346:	ef 92       	push	r14
 348:	ff 92       	push	r15
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	00 d0       	rcall	.+0      	; 0x354 <UART_Printf+0x12>
 354:	00 d0       	rcall	.+0      	; 0x356 <UART_Printf+0x14>
 356:	1f 92       	push	r1
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62
 35c:	fe 01       	movw	r30, r28
 35e:	70 96       	adiw	r30, 0x10	; 16
 360:	c1 90       	ld	r12, Z+
 362:	d1 90       	ld	r13, Z+
#if (Enable_UART_TxFloatNumber==1)
	double v_floatNum_f32;
#endif	


	va_start(argp, argList);
 364:	8f 01       	movw	r16, r30

	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
 366:	f6 01       	movw	r30, r12
 368:	80 81       	ld	r24, Z
 36a:	88 23       	and	r24, r24
 36c:	09 f4       	brne	.+2      	; 0x370 <UART_Printf+0x2e>
 36e:	2c c1       	rjmp	.+600    	; 0x5c8 <UART_Printf+0x286>
	{

		ch= *ptr;
		if(ch == '%')         /*Check for '%' as there will be format specifier after it */
 370:	85 32       	cpi	r24, 0x25	; 37
 372:	09 f0       	breq	.+2      	; 0x376 <UART_Printf+0x34>
 374:	0e c1       	rjmp	.+540    	; 0x592 <UART_Printf+0x250>
		{
		    ptr++;
 376:	76 01       	movw	r14, r12
 378:	8f ef       	ldi	r24, 0xFF	; 255
 37a:	e8 1a       	sub	r14, r24
 37c:	f8 0a       	sbc	r15, r24
		    ch = *ptr;
 37e:	f6 01       	movw	r30, r12
 380:	81 81       	ldd	r24, Z+1	; 0x01
		   if((ch>=0x30) && (ch<=0x39))
 382:	90 ed       	ldi	r25, 0xD0	; 208
 384:	98 0f       	add	r25, r24
 386:	9a 30       	cpi	r25, 0x0A	; 10
 388:	08 f0       	brcs	.+2      	; 0x38c <UART_Printf+0x4a>
 38a:	b7 c0       	rjmp	.+366    	; 0x4fa <UART_Printf+0x1b8>
 38c:	20 e0       	ldi	r18, 0x00	; 0
			{
			   v_numOfDigitsToTransmit_u8 = 0;
			   while((ch>=0x30) && (ch<=0x39))
 38e:	90 ed       	ldi	r25, 0xD0	; 208
 390:	98 0f       	add	r25, r24
 392:	9a 30       	cpi	r25, 0x0A	; 10
 394:	58 f4       	brcc	.+22     	; 0x3ac <UART_Printf+0x6a>
			    {
				   v_numOfDigitsToTransmit_u8 = (v_numOfDigitsToTransmit_u8 * 10) + (ch-0x30);
 396:	fa e0       	ldi	r31, 0x0A	; 10
 398:	2f 9f       	mul	r18, r31
 39a:	90 0d       	add	r25, r0
 39c:	11 24       	eor	r1, r1
 39e:	29 2f       	mov	r18, r25
				   ptr++;
 3a0:	8f ef       	ldi	r24, 0xFF	; 255
 3a2:	e8 1a       	sub	r14, r24
 3a4:	f8 0a       	sbc	r15, r24
				   ch = *ptr;
 3a6:	f7 01       	movw	r30, r14
 3a8:	80 81       	ld	r24, Z
 3aa:	f1 cf       	rjmp	.-30     	; 0x38e <UART_Printf+0x4c>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 3ac:	88 35       	cpi	r24, 0x58	; 88
 3ae:	09 f4       	brne	.+2      	; 0x3b2 <UART_Printf+0x70>
 3b0:	a8 c0       	rjmp	.+336    	; 0x502 <UART_Printf+0x1c0>
 3b2:	70 f4       	brcc	.+28     	; 0x3d0 <UART_Printf+0x8e>
 3b4:	84 34       	cpi	r24, 0x44	; 68
 3b6:	09 f4       	brne	.+2      	; 0x3ba <UART_Printf+0x78>
 3b8:	50 c0       	rjmp	.+160    	; 0x45a <UART_Printf+0x118>
 3ba:	18 f4       	brcc	.+6      	; 0x3c2 <UART_Printf+0x80>
 3bc:	82 34       	cpi	r24, 0x42	; 66
 3be:	d9 f4       	brne	.+54     	; 0x3f6 <UART_Printf+0xb4>
 3c0:	bd c0       	rjmp	.+378    	; 0x53c <UART_Printf+0x1fa>
 3c2:	83 35       	cpi	r24, 0x53	; 83
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <UART_Printf+0x86>
 3c6:	da c0       	rjmp	.+436    	; 0x57c <UART_Printf+0x23a>
 3c8:	85 35       	cpi	r24, 0x55	; 85
 3ca:	09 f4       	brne	.+2      	; 0x3ce <UART_Printf+0x8c>
 3cc:	7d c0       	rjmp	.+250    	; 0x4c8 <UART_Printf+0x186>
 3ce:	c6 c0       	rjmp	.+396    	; 0x55c <UART_Printf+0x21a>
 3d0:	86 36       	cpi	r24, 0x66	; 102
 3d2:	09 f4       	brne	.+2      	; 0x3d6 <UART_Printf+0x94>
 3d4:	c5 c0       	rjmp	.+394    	; 0x560 <UART_Printf+0x21e>
 3d6:	40 f4       	brcc	.+16     	; 0x3e8 <UART_Printf+0xa6>
 3d8:	83 36       	cpi	r24, 0x63	; 99
 3da:	81 f0       	breq	.+32     	; 0x3fc <UART_Printf+0xba>
 3dc:	84 36       	cpi	r24, 0x64	; 100
 3de:	21 f1       	breq	.+72     	; 0x428 <UART_Printf+0xe6>
 3e0:	82 36       	cpi	r24, 0x62	; 98
 3e2:	09 f0       	breq	.+2      	; 0x3e6 <UART_Printf+0xa4>
 3e4:	d9 c0       	rjmp	.+434    	; 0x598 <UART_Printf+0x256>
 3e6:	9d c0       	rjmp	.+314    	; 0x522 <UART_Printf+0x1e0>
 3e8:	85 37       	cpi	r24, 0x75	; 117
 3ea:	09 f4       	brne	.+2      	; 0x3ee <UART_Printf+0xac>
 3ec:	59 c0       	rjmp	.+178    	; 0x4a0 <UART_Printf+0x15e>
 3ee:	88 37       	cpi	r24, 0x78	; 120
 3f0:	09 f4       	brne	.+2      	; 0x3f4 <UART_Printf+0xb2>
 3f2:	79 c0       	rjmp	.+242    	; 0x4e6 <UART_Printf+0x1a4>
 3f4:	c1 c0       	rjmp	.+386    	; 0x578 <UART_Printf+0x236>
 3f6:	83 34       	cpi	r24, 0x43	; 67
 3f8:	08 f4       	brcc	.+2      	; 0x3fc <UART_Printf+0xba>
 3fa:	e0 c0       	rjmp	.+448    	; 0x5bc <UART_Printf+0x27a>
			{
			case 'C':
			case 'c':     /* Argument type is of char, hence read char data from the argp */
				ch = va_arg(argp, int);
 3fc:	68 01       	movw	r12, r16
 3fe:	f2 e0       	ldi	r31, 0x02	; 2
 400:	cf 0e       	add	r12, r31
 402:	d1 1c       	adc	r13, r1
				UART_TxChar(ch);
 404:	f8 01       	movw	r30, r16
 406:	80 81       	ld	r24, Z
 408:	0e 94 92 00 	call	0x124	; 0x124 <UART_TxChar>
 40c:	c0 c0       	rjmp	.+384    	; 0x58e <UART_Printf+0x24c>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 40e:	89 35       	cpi	r24, 0x59	; 89
 410:	08 f1       	brcs	.+66     	; 0x454 <UART_Printf+0x112>
 412:	86 36       	cpi	r24, 0x66	; 102
 414:	09 f4       	brne	.+2      	; 0x418 <UART_Printf+0xd6>
 416:	a4 c0       	rjmp	.+328    	; 0x560 <UART_Printf+0x21e>
 418:	08 f0       	brcs	.+2      	; 0x41c <UART_Printf+0xda>
 41a:	3f c0       	rjmp	.+126    	; 0x49a <UART_Printf+0x158>
 41c:	83 36       	cpi	r24, 0x63	; 99
 41e:	71 f3       	breq	.-36     	; 0x3fc <UART_Printf+0xba>
 420:	84 36       	cpi	r24, 0x64	; 100
 422:	09 f0       	breq	.+2      	; 0x426 <UART_Printf+0xe4>
 424:	7b c0       	rjmp	.+246    	; 0x51c <UART_Printf+0x1da>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 426:	2f ef       	ldi	r18, 0xFF	; 255
				ch = va_arg(argp, int);
				UART_TxChar(ch);
				break;

			case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
				v_num_s16 = va_arg(argp, sint16_t);
 428:	68 01       	movw	r12, r16
 42a:	f2 e0       	ldi	r31, 0x02	; 2
 42c:	cf 0e       	add	r12, r31
 42e:	d1 1c       	adc	r13, r1
 430:	f8 01       	movw	r30, r16
 432:	00 81       	ld	r16, Z
 434:	11 81       	ldd	r17, Z+1	; 0x01
				if(v_num_s16<0)
 436:	17 ff       	sbrs	r17, 7
 438:	08 c0       	rjmp	.+16     	; 0x44a <UART_Printf+0x108>
				 { /* If the number is -ve then display the 2's complement along with '-' sign */ 
				   v_num_s16 = -v_num_s16;
 43a:	11 95       	neg	r17
 43c:	01 95       	neg	r16
 43e:	11 09       	sbc	r17, r1
				   UART_TxChar('-');
 440:	8d e2       	ldi	r24, 0x2D	; 45
 442:	2d 83       	std	Y+5, r18	; 0x05
 444:	0e 94 92 00 	call	0x124	; 0x124 <UART_TxChar>
 448:	2d 81       	ldd	r18, Y+5	; 0x05
				 }
				UART_TxNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToTransmit_u8);
 44a:	a8 01       	movw	r20, r16
 44c:	11 0f       	add	r17, r17
 44e:	66 0b       	sbc	r22, r22
 450:	77 0b       	sbc	r23, r23
 452:	43 c0       	rjmp	.+134    	; 0x4da <UART_Printf+0x198>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 454:	84 34       	cpi	r24, 0x44	; 68
 456:	71 f5       	brne	.+92     	; 0x4b4 <UART_Printf+0x172>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 458:	2f ef       	ldi	r18, 0xFF	; 255
				 }
				UART_TxNumber(C_DECIMAL_U8,v_num_s16,v_numOfDigitsToTransmit_u8);
				break;
				
			case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
				v_num_s32 = va_arg(argp, sint32_t);				
 45a:	68 01       	movw	r12, r16
 45c:	f4 e0       	ldi	r31, 0x04	; 4
 45e:	cf 0e       	add	r12, r31
 460:	d1 1c       	adc	r13, r1
 462:	f8 01       	movw	r30, r16
 464:	40 81       	ld	r20, Z
 466:	51 81       	ldd	r21, Z+1	; 0x01
 468:	62 81       	ldd	r22, Z+2	; 0x02
 46a:	73 81       	ldd	r23, Z+3	; 0x03
				if(v_num_s32<0)
 46c:	77 ff       	sbrs	r23, 7
 46e:	35 c0       	rjmp	.+106    	; 0x4da <UART_Printf+0x198>
				 { /* If the number is -ve then display the 2's complement along with '-' sign */
				   v_num_s32 = -v_num_s32;
 470:	70 95       	com	r23
 472:	60 95       	com	r22
 474:	50 95       	com	r21
 476:	41 95       	neg	r20
 478:	5f 4f       	sbci	r21, 0xFF	; 255
 47a:	6f 4f       	sbci	r22, 0xFF	; 255
 47c:	7f 4f       	sbci	r23, 0xFF	; 255
				   UART_TxChar('-');
 47e:	8d e2       	ldi	r24, 0x2D	; 45
 480:	2d 83       	std	Y+5, r18	; 0x05
 482:	49 83       	std	Y+1, r20	; 0x01
 484:	5a 83       	std	Y+2, r21	; 0x02
 486:	6b 83       	std	Y+3, r22	; 0x03
 488:	7c 83       	std	Y+4, r23	; 0x04
 48a:	0e 94 92 00 	call	0x124	; 0x124 <UART_TxChar>
 48e:	7c 81       	ldd	r23, Y+4	; 0x04
 490:	6b 81       	ldd	r22, Y+3	; 0x03
 492:	5a 81       	ldd	r21, Y+2	; 0x02
 494:	49 81       	ldd	r20, Y+1	; 0x01
 496:	2d 81       	ldd	r18, Y+5	; 0x05
 498:	20 c0       	rjmp	.+64     	; 0x4da <UART_Printf+0x198>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 49a:	85 37       	cpi	r24, 0x75	; 117
 49c:	01 f5       	brne	.+64     	; 0x4de <UART_Printf+0x19c>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 49e:	2f ef       	ldi	r18, 0xFF	; 255
				 }
				UART_TxNumber(C_DECIMAL_U8,v_num_s32,v_numOfDigitsToTransmit_u8);			
				break;	

			case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
				v_num_u16 = va_arg(argp, uint16_t);			
 4a0:	68 01       	movw	r12, r16
 4a2:	f2 e0       	ldi	r31, 0x02	; 2
 4a4:	cf 0e       	add	r12, r31
 4a6:	d1 1c       	adc	r13, r1
				UART_TxNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToTransmit_u8);				
 4a8:	f8 01       	movw	r30, r16
 4aa:	40 81       	ld	r20, Z
 4ac:	51 81       	ldd	r21, Z+1	; 0x01
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	13 c0       	rjmp	.+38     	; 0x4da <UART_Printf+0x198>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 4b4:	85 34       	cpi	r24, 0x45	; 69
 4b6:	08 f4       	brcc	.+2      	; 0x4ba <UART_Printf+0x178>
 4b8:	74 c0       	rjmp	.+232    	; 0x5a2 <UART_Printf+0x260>
 4ba:	83 35       	cpi	r24, 0x53	; 83
 4bc:	09 f4       	brne	.+2      	; 0x4c0 <UART_Printf+0x17e>
 4be:	5e c0       	rjmp	.+188    	; 0x57c <UART_Printf+0x23a>
 4c0:	85 35       	cpi	r24, 0x55	; 85
 4c2:	09 f0       	breq	.+2      	; 0x4c6 <UART_Printf+0x184>
 4c4:	4b c0       	rjmp	.+150    	; 0x55c <UART_Printf+0x21a>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 4c6:	2f ef       	ldi	r18, 0xFF	; 255
				v_num_u16 = va_arg(argp, uint16_t);			
				UART_TxNumber(C_DECIMAL_U8,v_num_u16,v_numOfDigitsToTransmit_u8);				
				break;
			
			case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
				v_num_u32 = va_arg(argp, uint32_t);			
 4c8:	68 01       	movw	r12, r16
 4ca:	f4 e0       	ldi	r31, 0x04	; 4
 4cc:	cf 0e       	add	r12, r31
 4ce:	d1 1c       	adc	r13, r1
				UART_TxNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToTransmit_u8);				
 4d0:	f8 01       	movw	r30, r16
 4d2:	40 81       	ld	r20, Z
 4d4:	51 81       	ldd	r21, Z+1	; 0x01
 4d6:	62 81       	ldd	r22, Z+2	; 0x02
 4d8:	73 81       	ldd	r23, Z+3	; 0x03
 4da:	8a e0       	ldi	r24, 0x0A	; 10
 4dc:	1c c0       	rjmp	.+56     	; 0x516 <UART_Printf+0x1d4>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 4de:	88 37       	cpi	r24, 0x78	; 120
 4e0:	09 f0       	breq	.+2      	; 0x4e4 <UART_Printf+0x1a2>
 4e2:	4a c0       	rjmp	.+148    	; 0x578 <UART_Printf+0x236>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 4e4:	2f ef       	ldi	r18, 0xFF	; 255
				v_num_u32 = va_arg(argp, uint32_t);			
				UART_TxNumber(C_DECIMAL_U8,v_num_u32,v_numOfDigitsToTransmit_u8);				
				break;			

			case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
				v_num_u16 = va_arg(argp, uint16_t);				
 4e6:	68 01       	movw	r12, r16
 4e8:	f2 e0       	ldi	r31, 0x02	; 2
 4ea:	cf 0e       	add	r12, r31
 4ec:	d1 1c       	adc	r13, r1
				UART_TxNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToTransmit_u8);			
 4ee:	f8 01       	movw	r30, r16
 4f0:	40 81       	ld	r20, Z
 4f2:	51 81       	ldd	r21, Z+1	; 0x01
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	0d c0       	rjmp	.+26     	; 0x514 <UART_Printf+0x1d2>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 4fa:	88 35       	cpi	r24, 0x58	; 88
 4fc:	09 f0       	breq	.+2      	; 0x500 <UART_Printf+0x1be>
 4fe:	87 cf       	rjmp	.-242    	; 0x40e <UART_Printf+0xcc>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 500:	2f ef       	ldi	r18, 0xFF	; 255
				v_num_u16 = va_arg(argp, uint16_t);				
				UART_TxNumber(C_HEX_U8,v_num_u16,v_numOfDigitsToTransmit_u8);			
				break;

			case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
				v_num_u32 = va_arg(argp, uint32_t);						
 502:	68 01       	movw	r12, r16
 504:	f4 e0       	ldi	r31, 0x04	; 4
 506:	cf 0e       	add	r12, r31
 508:	d1 1c       	adc	r13, r1
				UART_TxNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToTransmit_u8);				
 50a:	f8 01       	movw	r30, r16
 50c:	40 81       	ld	r20, Z
 50e:	51 81       	ldd	r21, Z+1	; 0x01
 510:	62 81       	ldd	r22, Z+2	; 0x02
 512:	73 81       	ldd	r23, Z+3	; 0x03
 514:	80 e1       	ldi	r24, 0x10	; 16
 516:	0e 94 df 00 	call	0x1be	; 0x1be <UART_TxNumber>
 51a:	39 c0       	rjmp	.+114    	; 0x58e <UART_Printf+0x24c>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 51c:	82 36       	cpi	r24, 0x62	; 98
 51e:	e1 f5       	brne	.+120    	; 0x598 <UART_Printf+0x256>
				   ch = *ptr;
				}
			}
			else
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 520:	2f ef       	ldi	r18, 0xFF	; 255
				UART_TxNumber(C_HEX_U8,v_num_u32,v_numOfDigitsToTransmit_u8);				
				break;

			
			case 'b':  /* Argument type is of binary,Read int and convert to binary */
				v_num_u16 = va_arg(argp, uint16_t);		
 522:	68 01       	movw	r12, r16
 524:	f2 e0       	ldi	r31, 0x02	; 2
 526:	cf 0e       	add	r12, r31
 528:	d1 1c       	adc	r13, r1
 52a:	f8 01       	movw	r30, r16
 52c:	60 81       	ld	r22, Z
 52e:	71 81       	ldd	r23, Z+1	; 0x01
				
				if(v_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
 530:	2f 3f       	cpi	r18, 0xFF	; 255
 532:	09 f4       	brne	.+2      	; 0x536 <UART_Printf+0x1f4>
				   v_numOfDigitsToTransmit_u8 = 16;
 534:	20 e1       	ldi	r18, 0x10	; 16
               
				UART_TxNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToTransmit_u8);			
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0c c0       	rjmp	.+24     	; 0x554 <UART_Printf+0x212>
				break;

			case 'B':  /* Argument type is of binary,Read int and convert to binary */
				v_num_u32 = va_arg(argp, uint32_t);			
 53c:	68 01       	movw	r12, r16
 53e:	f4 e0       	ldi	r31, 0x04	; 4
 540:	cf 0e       	add	r12, r31
 542:	d1 1c       	adc	r13, r1
 544:	f8 01       	movw	r30, r16
 546:	60 81       	ld	r22, Z
 548:	71 81       	ldd	r23, Z+1	; 0x01
 54a:	82 81       	ldd	r24, Z+2	; 0x02
 54c:	93 81       	ldd	r25, Z+3	; 0x03
                
				if(v_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
 54e:	2f 3f       	cpi	r18, 0xFF	; 255
 550:	09 f4       	brne	.+2      	; 0x554 <UART_Printf+0x212>
				   v_numOfDigitsToTransmit_u8 = 32;		
 552:	20 e2       	ldi	r18, 0x20	; 32
 554:	42 2f       	mov	r20, r18
 556:	0e 94 96 00 	call	0x12c	; 0x12c <UART_TxNumber.part.0>
 55a:	19 c0       	rjmp	.+50     	; 0x58e <UART_Printf+0x24c>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 55c:	86 34       	cpi	r24, 0x46	; 70
 55e:	e1 f4       	brne	.+56     	; 0x598 <UART_Printf+0x256>


			case 'F':
			case 'f': /* Argument type is of float, hence read double data from the argp */
#if (Enable_UART_TxFloatNumber==1)				
				v_floatNum_f32 = va_arg(argp, double);				
 560:	68 01       	movw	r12, r16
 562:	f4 e0       	ldi	r31, 0x04	; 4
 564:	cf 0e       	add	r12, r31
 566:	d1 1c       	adc	r13, r1
				UART_TxFloatNumber(v_floatNum_f32);
 568:	f8 01       	movw	r30, r16
 56a:	60 81       	ld	r22, Z
 56c:	71 81       	ldd	r23, Z+1	; 0x01
 56e:	82 81       	ldd	r24, Z+2	; 0x02
 570:	93 81       	ldd	r25, Z+3	; 0x03
 572:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <UART_TxFloatNumber>
 576:	0b c0       	rjmp	.+22     	; 0x58e <UART_Printf+0x24c>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 578:	83 37       	cpi	r24, 0x73	; 115
 57a:	71 f4       	brne	.+28     	; 0x598 <UART_Printf+0x256>
				break;                


			case 'S':
			case 's': /* Argument type is of string, hence get the pointer to sting passed */
				str = va_arg(argp, char *);
 57c:	68 01       	movw	r12, r16
 57e:	f2 e0       	ldi	r31, 0x02	; 2
 580:	cf 0e       	add	r12, r31
 582:	d1 1c       	adc	r13, r1
				UART_TxString(str);			
 584:	f8 01       	movw	r30, r16
 586:	80 81       	ld	r24, Z
 588:	91 81       	ldd	r25, Z+1	; 0x01
 58a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_TxString>
				break;                


			case 'S':
			case 's': /* Argument type is of string, hence get the pointer to sting passed */
				str = va_arg(argp, char *);
 58e:	86 01       	movw	r16, r12
				UART_TxString(str);			
				break;
 590:	03 c0       	rjmp	.+6      	; 0x598 <UART_Printf+0x256>
			}
		}
		else
		{
			/* As '%' is not detected transmit the char passed */
			UART_TxChar(ch);
 592:	0e 94 92 00 	call	0x124	; 0x124 <UART_TxChar>
 596:	76 01       	movw	r14, r12


	va_start(argp, argList);

	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
 598:	67 01       	movw	r12, r14
 59a:	ff ef       	ldi	r31, 0xFF	; 255
 59c:	cf 1a       	sub	r12, r31
 59e:	df 0a       	sbc	r13, r31
 5a0:	e2 ce       	rjmp	.-572    	; 0x366 <UART_Printf+0x24>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 5a2:	82 34       	cpi	r24, 0x42	; 66
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <UART_Printf+0x266>
 5a6:	27 cf       	rjmp	.-434    	; 0x3f6 <UART_Printf+0xb4>
               
				UART_TxNumber(C_BINARY_U8,v_num_u16,v_numOfDigitsToTransmit_u8);			
				break;

			case 'B':  /* Argument type is of binary,Read int and convert to binary */
				v_num_u32 = va_arg(argp, uint32_t);			
 5a8:	68 01       	movw	r12, r16
 5aa:	f4 e0       	ldi	r31, 0x04	; 4
 5ac:	cf 0e       	add	r12, r31
 5ae:	d1 1c       	adc	r13, r1
 5b0:	f8 01       	movw	r30, r16
 5b2:	60 81       	ld	r22, Z
 5b4:	71 81       	ldd	r23, Z+1	; 0x01
 5b6:	82 81       	ldd	r24, Z+2	; 0x02
 5b8:	93 81       	ldd	r25, Z+3	; 0x03
 5ba:	cb cf       	rjmp	.-106    	; 0x552 <UART_Printf+0x210>
			{
			  v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 5bc:	85 32       	cpi	r24, 0x25	; 37
 5be:	61 f7       	brne	.-40     	; 0x598 <UART_Printf+0x256>
				str = va_arg(argp, char *);
				UART_TxString(str);			
				break;

			case '%':
				UART_TxChar('%');
 5c0:	85 e2       	ldi	r24, 0x25	; 37
 5c2:	0e 94 92 00 	call	0x124	; 0x124 <UART_TxChar>
				break;
 5c6:	e8 cf       	rjmp	.-48     	; 0x598 <UART_Printf+0x256>
			UART_TxChar(ch);
		}
	}

	va_end(argp);
}
 5c8:	0f 90       	pop	r0
 5ca:	0f 90       	pop	r0
 5cc:	0f 90       	pop	r0
 5ce:	0f 90       	pop	r0
 5d0:	0f 90       	pop	r0
 5d2:	df 91       	pop	r29
 5d4:	cf 91       	pop	r28
 5d6:	1f 91       	pop	r17
 5d8:	0f 91       	pop	r16
 5da:	ff 90       	pop	r15
 5dc:	ef 90       	pop	r14
 5de:	df 90       	pop	r13
 5e0:	cf 90       	pop	r12
 5e2:	08 95       	ret

000005e4 <main>:
int main() 
{
    int adcValue;
    float volt;
    
    ADC_Init();       /* Initialize the ADC module */
 5e4:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>
    UART_Init(9600);  /* Initialize UART at 9600 baud rate */
 5e8:	60 e8       	ldi	r22, 0x80	; 128
 5ea:	75 e2       	ldi	r23, 0x25	; 37
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 8b 00 	call	0x116	; 0x116 <UART_Init>
    while(1)
    {
        adcValue = ADC_GetAdcValue(0); // Read the ADC value of channel zero
        volt = (adcValue*5.00)/1023;   //10bit resolution, 5vReference
		
        UART_Printf("ADC0 Value:%4d Equivalent Voltage:%f\n\r",adcValue,volt);     // Send the value on UART
 5f4:	00 e6       	ldi	r16, 0x60	; 96
 5f6:	10 e0       	ldi	r17, 0x00	; 0
    ADC_Init();       /* Initialize the ADC module */
    UART_Init(9600);  /* Initialize UART at 9600 baud rate */
    
    while(1)
    {
        adcValue = ADC_GetAdcValue(0); // Read the ADC value of channel zero
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	0e 94 45 00 	call	0x8a	; 0x8a <ADC_GetAdcValue>
 5fe:	ec 01       	movw	r28, r24
        volt = (adcValue*5.00)/1023;   //10bit resolution, 5vReference
 600:	bc 01       	movw	r22, r24
 602:	99 0f       	add	r25, r25
 604:	88 0b       	sbc	r24, r24
 606:	99 0b       	sbc	r25, r25
 608:	0e 94 35 04 	call	0x86a	; 0x86a <__floatsisf>
 60c:	20 e0       	ldi	r18, 0x00	; 0
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	40 ea       	ldi	r20, 0xA0	; 160
 612:	50 e4       	ldi	r21, 0x40	; 64
 614:	0e 94 c1 04 	call	0x982	; 0x982 <__mulsf3>
 618:	20 e0       	ldi	r18, 0x00	; 0
 61a:	30 ec       	ldi	r19, 0xC0	; 192
 61c:	4f e7       	ldi	r20, 0x7F	; 127
 61e:	54 e4       	ldi	r21, 0x44	; 68
 620:	0e 94 92 03 	call	0x724	; 0x724 <__divsf3>
		
        UART_Printf("ADC0 Value:%4d Equivalent Voltage:%f\n\r",adcValue,volt);     // Send the value on UART
 624:	9f 93       	push	r25
 626:	8f 93       	push	r24
 628:	7f 93       	push	r23
 62a:	6f 93       	push	r22
 62c:	df 93       	push	r29
 62e:	cf 93       	push	r28
 630:	1f 93       	push	r17
 632:	0f 93       	push	r16
 634:	0e 94 a1 01 	call	0x342	; 0x342 <UART_Printf>
    }
 638:	8d b7       	in	r24, 0x3d	; 61
 63a:	9e b7       	in	r25, 0x3e	; 62
 63c:	08 96       	adiw	r24, 0x08	; 8
 63e:	0f b6       	in	r0, 0x3f	; 63
 640:	f8 94       	cli
 642:	9e bf       	out	0x3e, r25	; 62
 644:	0f be       	out	0x3f, r0	; 63
 646:	8d bf       	out	0x3d, r24	; 61
 648:	d7 cf       	rjmp	.-82     	; 0x5f8 <main+0x14>

0000064a <__subsf3>:
 64a:	50 58       	subi	r21, 0x80	; 128

0000064c <__addsf3>:
 64c:	bb 27       	eor	r27, r27
 64e:	aa 27       	eor	r26, r26
 650:	0e 94 3d 03 	call	0x67a	; 0x67a <__addsf3x>
 654:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_round>
 658:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__fp_pscA>
 65c:	38 f0       	brcs	.+14     	; 0x66c <__addsf3+0x20>
 65e:	0e 94 80 04 	call	0x900	; 0x900 <__fp_pscB>
 662:	20 f0       	brcs	.+8      	; 0x66c <__addsf3+0x20>
 664:	39 f4       	brne	.+14     	; 0x674 <__addsf3+0x28>
 666:	9f 3f       	cpi	r25, 0xFF	; 255
 668:	19 f4       	brne	.+6      	; 0x670 <__addsf3+0x24>
 66a:	26 f4       	brtc	.+8      	; 0x674 <__addsf3+0x28>
 66c:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__fp_nan>
 670:	0e f4       	brtc	.+2      	; 0x674 <__addsf3+0x28>
 672:	e0 95       	com	r30
 674:	e7 fb       	bst	r30, 7
 676:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__fp_inf>

0000067a <__addsf3x>:
 67a:	e9 2f       	mov	r30, r25
 67c:	0e 94 98 04 	call	0x930	; 0x930 <__fp_split3>
 680:	58 f3       	brcs	.-42     	; 0x658 <__addsf3+0xc>
 682:	ba 17       	cp	r27, r26
 684:	62 07       	cpc	r22, r18
 686:	73 07       	cpc	r23, r19
 688:	84 07       	cpc	r24, r20
 68a:	95 07       	cpc	r25, r21
 68c:	20 f0       	brcs	.+8      	; 0x696 <__addsf3x+0x1c>
 68e:	79 f4       	brne	.+30     	; 0x6ae <__addsf3x+0x34>
 690:	a6 f5       	brtc	.+104    	; 0x6fa <__addsf3x+0x80>
 692:	0c 94 ba 04 	jmp	0x974	; 0x974 <__fp_zero>
 696:	0e f4       	brtc	.+2      	; 0x69a <__addsf3x+0x20>
 698:	e0 95       	com	r30
 69a:	0b 2e       	mov	r0, r27
 69c:	ba 2f       	mov	r27, r26
 69e:	a0 2d       	mov	r26, r0
 6a0:	0b 01       	movw	r0, r22
 6a2:	b9 01       	movw	r22, r18
 6a4:	90 01       	movw	r18, r0
 6a6:	0c 01       	movw	r0, r24
 6a8:	ca 01       	movw	r24, r20
 6aa:	a0 01       	movw	r20, r0
 6ac:	11 24       	eor	r1, r1
 6ae:	ff 27       	eor	r31, r31
 6b0:	59 1b       	sub	r21, r25
 6b2:	99 f0       	breq	.+38     	; 0x6da <__addsf3x+0x60>
 6b4:	59 3f       	cpi	r21, 0xF9	; 249
 6b6:	50 f4       	brcc	.+20     	; 0x6cc <__addsf3x+0x52>
 6b8:	50 3e       	cpi	r21, 0xE0	; 224
 6ba:	68 f1       	brcs	.+90     	; 0x716 <__addsf3x+0x9c>
 6bc:	1a 16       	cp	r1, r26
 6be:	f0 40       	sbci	r31, 0x00	; 0
 6c0:	a2 2f       	mov	r26, r18
 6c2:	23 2f       	mov	r18, r19
 6c4:	34 2f       	mov	r19, r20
 6c6:	44 27       	eor	r20, r20
 6c8:	58 5f       	subi	r21, 0xF8	; 248
 6ca:	f3 cf       	rjmp	.-26     	; 0x6b2 <__addsf3x+0x38>
 6cc:	46 95       	lsr	r20
 6ce:	37 95       	ror	r19
 6d0:	27 95       	ror	r18
 6d2:	a7 95       	ror	r26
 6d4:	f0 40       	sbci	r31, 0x00	; 0
 6d6:	53 95       	inc	r21
 6d8:	c9 f7       	brne	.-14     	; 0x6cc <__addsf3x+0x52>
 6da:	7e f4       	brtc	.+30     	; 0x6fa <__addsf3x+0x80>
 6dc:	1f 16       	cp	r1, r31
 6de:	ba 0b       	sbc	r27, r26
 6e0:	62 0b       	sbc	r22, r18
 6e2:	73 0b       	sbc	r23, r19
 6e4:	84 0b       	sbc	r24, r20
 6e6:	ba f0       	brmi	.+46     	; 0x716 <__addsf3x+0x9c>
 6e8:	91 50       	subi	r25, 0x01	; 1
 6ea:	a1 f0       	breq	.+40     	; 0x714 <__addsf3x+0x9a>
 6ec:	ff 0f       	add	r31, r31
 6ee:	bb 1f       	adc	r27, r27
 6f0:	66 1f       	adc	r22, r22
 6f2:	77 1f       	adc	r23, r23
 6f4:	88 1f       	adc	r24, r24
 6f6:	c2 f7       	brpl	.-16     	; 0x6e8 <__addsf3x+0x6e>
 6f8:	0e c0       	rjmp	.+28     	; 0x716 <__addsf3x+0x9c>
 6fa:	ba 0f       	add	r27, r26
 6fc:	62 1f       	adc	r22, r18
 6fe:	73 1f       	adc	r23, r19
 700:	84 1f       	adc	r24, r20
 702:	48 f4       	brcc	.+18     	; 0x716 <__addsf3x+0x9c>
 704:	87 95       	ror	r24
 706:	77 95       	ror	r23
 708:	67 95       	ror	r22
 70a:	b7 95       	ror	r27
 70c:	f7 95       	ror	r31
 70e:	9e 3f       	cpi	r25, 0xFE	; 254
 710:	08 f0       	brcs	.+2      	; 0x714 <__addsf3x+0x9a>
 712:	b0 cf       	rjmp	.-160    	; 0x674 <__addsf3+0x28>
 714:	93 95       	inc	r25
 716:	88 0f       	add	r24, r24
 718:	08 f0       	brcs	.+2      	; 0x71c <__addsf3x+0xa2>
 71a:	99 27       	eor	r25, r25
 71c:	ee 0f       	add	r30, r30
 71e:	97 95       	ror	r25
 720:	87 95       	ror	r24
 722:	08 95       	ret

00000724 <__divsf3>:
 724:	0e 94 a6 03 	call	0x74c	; 0x74c <__divsf3x>
 728:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_round>
 72c:	0e 94 80 04 	call	0x900	; 0x900 <__fp_pscB>
 730:	58 f0       	brcs	.+22     	; 0x748 <__divsf3+0x24>
 732:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__fp_pscA>
 736:	40 f0       	brcs	.+16     	; 0x748 <__divsf3+0x24>
 738:	29 f4       	brne	.+10     	; 0x744 <__divsf3+0x20>
 73a:	5f 3f       	cpi	r21, 0xFF	; 255
 73c:	29 f0       	breq	.+10     	; 0x748 <__divsf3+0x24>
 73e:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__fp_inf>
 742:	51 11       	cpse	r21, r1
 744:	0c 94 bb 04 	jmp	0x976	; 0x976 <__fp_szero>
 748:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__fp_nan>

0000074c <__divsf3x>:
 74c:	0e 94 98 04 	call	0x930	; 0x930 <__fp_split3>
 750:	68 f3       	brcs	.-38     	; 0x72c <__divsf3+0x8>

00000752 <__divsf3_pse>:
 752:	99 23       	and	r25, r25
 754:	b1 f3       	breq	.-20     	; 0x742 <__divsf3+0x1e>
 756:	55 23       	and	r21, r21
 758:	91 f3       	breq	.-28     	; 0x73e <__divsf3+0x1a>
 75a:	95 1b       	sub	r25, r21
 75c:	55 0b       	sbc	r21, r21
 75e:	bb 27       	eor	r27, r27
 760:	aa 27       	eor	r26, r26
 762:	62 17       	cp	r22, r18
 764:	73 07       	cpc	r23, r19
 766:	84 07       	cpc	r24, r20
 768:	38 f0       	brcs	.+14     	; 0x778 <__divsf3_pse+0x26>
 76a:	9f 5f       	subi	r25, 0xFF	; 255
 76c:	5f 4f       	sbci	r21, 0xFF	; 255
 76e:	22 0f       	add	r18, r18
 770:	33 1f       	adc	r19, r19
 772:	44 1f       	adc	r20, r20
 774:	aa 1f       	adc	r26, r26
 776:	a9 f3       	breq	.-22     	; 0x762 <__divsf3_pse+0x10>
 778:	35 d0       	rcall	.+106    	; 0x7e4 <__divsf3_pse+0x92>
 77a:	0e 2e       	mov	r0, r30
 77c:	3a f0       	brmi	.+14     	; 0x78c <__divsf3_pse+0x3a>
 77e:	e0 e8       	ldi	r30, 0x80	; 128
 780:	32 d0       	rcall	.+100    	; 0x7e6 <__divsf3_pse+0x94>
 782:	91 50       	subi	r25, 0x01	; 1
 784:	50 40       	sbci	r21, 0x00	; 0
 786:	e6 95       	lsr	r30
 788:	00 1c       	adc	r0, r0
 78a:	ca f7       	brpl	.-14     	; 0x77e <__divsf3_pse+0x2c>
 78c:	2b d0       	rcall	.+86     	; 0x7e4 <__divsf3_pse+0x92>
 78e:	fe 2f       	mov	r31, r30
 790:	29 d0       	rcall	.+82     	; 0x7e4 <__divsf3_pse+0x92>
 792:	66 0f       	add	r22, r22
 794:	77 1f       	adc	r23, r23
 796:	88 1f       	adc	r24, r24
 798:	bb 1f       	adc	r27, r27
 79a:	26 17       	cp	r18, r22
 79c:	37 07       	cpc	r19, r23
 79e:	48 07       	cpc	r20, r24
 7a0:	ab 07       	cpc	r26, r27
 7a2:	b0 e8       	ldi	r27, 0x80	; 128
 7a4:	09 f0       	breq	.+2      	; 0x7a8 <__divsf3_pse+0x56>
 7a6:	bb 0b       	sbc	r27, r27
 7a8:	80 2d       	mov	r24, r0
 7aa:	bf 01       	movw	r22, r30
 7ac:	ff 27       	eor	r31, r31
 7ae:	93 58       	subi	r25, 0x83	; 131
 7b0:	5f 4f       	sbci	r21, 0xFF	; 255
 7b2:	3a f0       	brmi	.+14     	; 0x7c2 <__divsf3_pse+0x70>
 7b4:	9e 3f       	cpi	r25, 0xFE	; 254
 7b6:	51 05       	cpc	r21, r1
 7b8:	78 f0       	brcs	.+30     	; 0x7d8 <__divsf3_pse+0x86>
 7ba:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__fp_inf>
 7be:	0c 94 bb 04 	jmp	0x976	; 0x976 <__fp_szero>
 7c2:	5f 3f       	cpi	r21, 0xFF	; 255
 7c4:	e4 f3       	brlt	.-8      	; 0x7be <__divsf3_pse+0x6c>
 7c6:	98 3e       	cpi	r25, 0xE8	; 232
 7c8:	d4 f3       	brlt	.-12     	; 0x7be <__divsf3_pse+0x6c>
 7ca:	86 95       	lsr	r24
 7cc:	77 95       	ror	r23
 7ce:	67 95       	ror	r22
 7d0:	b7 95       	ror	r27
 7d2:	f7 95       	ror	r31
 7d4:	9f 5f       	subi	r25, 0xFF	; 255
 7d6:	c9 f7       	brne	.-14     	; 0x7ca <__divsf3_pse+0x78>
 7d8:	88 0f       	add	r24, r24
 7da:	91 1d       	adc	r25, r1
 7dc:	96 95       	lsr	r25
 7de:	87 95       	ror	r24
 7e0:	97 f9       	bld	r25, 7
 7e2:	08 95       	ret
 7e4:	e1 e0       	ldi	r30, 0x01	; 1
 7e6:	66 0f       	add	r22, r22
 7e8:	77 1f       	adc	r23, r23
 7ea:	88 1f       	adc	r24, r24
 7ec:	bb 1f       	adc	r27, r27
 7ee:	62 17       	cp	r22, r18
 7f0:	73 07       	cpc	r23, r19
 7f2:	84 07       	cpc	r24, r20
 7f4:	ba 07       	cpc	r27, r26
 7f6:	20 f0       	brcs	.+8      	; 0x800 <__divsf3_pse+0xae>
 7f8:	62 1b       	sub	r22, r18
 7fa:	73 0b       	sbc	r23, r19
 7fc:	84 0b       	sbc	r24, r20
 7fe:	ba 0b       	sbc	r27, r26
 800:	ee 1f       	adc	r30, r30
 802:	88 f7       	brcc	.-30     	; 0x7e6 <__divsf3_pse+0x94>
 804:	e0 95       	com	r30
 806:	08 95       	ret

00000808 <__fixunssfsi>:
 808:	0e 94 a0 04 	call	0x940	; 0x940 <__fp_splitA>
 80c:	88 f0       	brcs	.+34     	; 0x830 <__fixunssfsi+0x28>
 80e:	9f 57       	subi	r25, 0x7F	; 127
 810:	98 f0       	brcs	.+38     	; 0x838 <__fixunssfsi+0x30>
 812:	b9 2f       	mov	r27, r25
 814:	99 27       	eor	r25, r25
 816:	b7 51       	subi	r27, 0x17	; 23
 818:	b0 f0       	brcs	.+44     	; 0x846 <__fixunssfsi+0x3e>
 81a:	e1 f0       	breq	.+56     	; 0x854 <__fixunssfsi+0x4c>
 81c:	66 0f       	add	r22, r22
 81e:	77 1f       	adc	r23, r23
 820:	88 1f       	adc	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	1a f0       	brmi	.+6      	; 0x82c <__fixunssfsi+0x24>
 826:	ba 95       	dec	r27
 828:	c9 f7       	brne	.-14     	; 0x81c <__fixunssfsi+0x14>
 82a:	14 c0       	rjmp	.+40     	; 0x854 <__fixunssfsi+0x4c>
 82c:	b1 30       	cpi	r27, 0x01	; 1
 82e:	91 f0       	breq	.+36     	; 0x854 <__fixunssfsi+0x4c>
 830:	0e 94 ba 04 	call	0x974	; 0x974 <__fp_zero>
 834:	b1 e0       	ldi	r27, 0x01	; 1
 836:	08 95       	ret
 838:	0c 94 ba 04 	jmp	0x974	; 0x974 <__fp_zero>
 83c:	67 2f       	mov	r22, r23
 83e:	78 2f       	mov	r23, r24
 840:	88 27       	eor	r24, r24
 842:	b8 5f       	subi	r27, 0xF8	; 248
 844:	39 f0       	breq	.+14     	; 0x854 <__fixunssfsi+0x4c>
 846:	b9 3f       	cpi	r27, 0xF9	; 249
 848:	cc f3       	brlt	.-14     	; 0x83c <__fixunssfsi+0x34>
 84a:	86 95       	lsr	r24
 84c:	77 95       	ror	r23
 84e:	67 95       	ror	r22
 850:	b3 95       	inc	r27
 852:	d9 f7       	brne	.-10     	; 0x84a <__fixunssfsi+0x42>
 854:	3e f4       	brtc	.+14     	; 0x864 <__stack+0x5>
 856:	90 95       	com	r25
 858:	80 95       	com	r24
 85a:	70 95       	com	r23
 85c:	61 95       	neg	r22
 85e:	7f 4f       	sbci	r23, 0xFF	; 255
 860:	8f 4f       	sbci	r24, 0xFF	; 255
 862:	9f 4f       	sbci	r25, 0xFF	; 255
 864:	08 95       	ret

00000866 <__floatunsisf>:
 866:	e8 94       	clt
 868:	09 c0       	rjmp	.+18     	; 0x87c <__floatsisf+0x12>

0000086a <__floatsisf>:
 86a:	97 fb       	bst	r25, 7
 86c:	3e f4       	brtc	.+14     	; 0x87c <__floatsisf+0x12>
 86e:	90 95       	com	r25
 870:	80 95       	com	r24
 872:	70 95       	com	r23
 874:	61 95       	neg	r22
 876:	7f 4f       	sbci	r23, 0xFF	; 255
 878:	8f 4f       	sbci	r24, 0xFF	; 255
 87a:	9f 4f       	sbci	r25, 0xFF	; 255
 87c:	99 23       	and	r25, r25
 87e:	a9 f0       	breq	.+42     	; 0x8aa <__floatsisf+0x40>
 880:	f9 2f       	mov	r31, r25
 882:	96 e9       	ldi	r25, 0x96	; 150
 884:	bb 27       	eor	r27, r27
 886:	93 95       	inc	r25
 888:	f6 95       	lsr	r31
 88a:	87 95       	ror	r24
 88c:	77 95       	ror	r23
 88e:	67 95       	ror	r22
 890:	b7 95       	ror	r27
 892:	f1 11       	cpse	r31, r1
 894:	f8 cf       	rjmp	.-16     	; 0x886 <__floatsisf+0x1c>
 896:	fa f4       	brpl	.+62     	; 0x8d6 <__floatsisf+0x6c>
 898:	bb 0f       	add	r27, r27
 89a:	11 f4       	brne	.+4      	; 0x8a0 <__floatsisf+0x36>
 89c:	60 ff       	sbrs	r22, 0
 89e:	1b c0       	rjmp	.+54     	; 0x8d6 <__floatsisf+0x6c>
 8a0:	6f 5f       	subi	r22, 0xFF	; 255
 8a2:	7f 4f       	sbci	r23, 0xFF	; 255
 8a4:	8f 4f       	sbci	r24, 0xFF	; 255
 8a6:	9f 4f       	sbci	r25, 0xFF	; 255
 8a8:	16 c0       	rjmp	.+44     	; 0x8d6 <__floatsisf+0x6c>
 8aa:	88 23       	and	r24, r24
 8ac:	11 f0       	breq	.+4      	; 0x8b2 <__floatsisf+0x48>
 8ae:	96 e9       	ldi	r25, 0x96	; 150
 8b0:	11 c0       	rjmp	.+34     	; 0x8d4 <__floatsisf+0x6a>
 8b2:	77 23       	and	r23, r23
 8b4:	21 f0       	breq	.+8      	; 0x8be <__floatsisf+0x54>
 8b6:	9e e8       	ldi	r25, 0x8E	; 142
 8b8:	87 2f       	mov	r24, r23
 8ba:	76 2f       	mov	r23, r22
 8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <__floatsisf+0x5e>
 8be:	66 23       	and	r22, r22
 8c0:	71 f0       	breq	.+28     	; 0x8de <__floatsisf+0x74>
 8c2:	96 e8       	ldi	r25, 0x86	; 134
 8c4:	86 2f       	mov	r24, r22
 8c6:	70 e0       	ldi	r23, 0x00	; 0
 8c8:	60 e0       	ldi	r22, 0x00	; 0
 8ca:	2a f0       	brmi	.+10     	; 0x8d6 <__floatsisf+0x6c>
 8cc:	9a 95       	dec	r25
 8ce:	66 0f       	add	r22, r22
 8d0:	77 1f       	adc	r23, r23
 8d2:	88 1f       	adc	r24, r24
 8d4:	da f7       	brpl	.-10     	; 0x8cc <__floatsisf+0x62>
 8d6:	88 0f       	add	r24, r24
 8d8:	96 95       	lsr	r25
 8da:	87 95       	ror	r24
 8dc:	97 f9       	bld	r25, 7
 8de:	08 95       	ret

000008e0 <__fp_inf>:
 8e0:	97 f9       	bld	r25, 7
 8e2:	9f 67       	ori	r25, 0x7F	; 127
 8e4:	80 e8       	ldi	r24, 0x80	; 128
 8e6:	70 e0       	ldi	r23, 0x00	; 0
 8e8:	60 e0       	ldi	r22, 0x00	; 0
 8ea:	08 95       	ret

000008ec <__fp_nan>:
 8ec:	9f ef       	ldi	r25, 0xFF	; 255
 8ee:	80 ec       	ldi	r24, 0xC0	; 192
 8f0:	08 95       	ret

000008f2 <__fp_pscA>:
 8f2:	00 24       	eor	r0, r0
 8f4:	0a 94       	dec	r0
 8f6:	16 16       	cp	r1, r22
 8f8:	17 06       	cpc	r1, r23
 8fa:	18 06       	cpc	r1, r24
 8fc:	09 06       	cpc	r0, r25
 8fe:	08 95       	ret

00000900 <__fp_pscB>:
 900:	00 24       	eor	r0, r0
 902:	0a 94       	dec	r0
 904:	12 16       	cp	r1, r18
 906:	13 06       	cpc	r1, r19
 908:	14 06       	cpc	r1, r20
 90a:	05 06       	cpc	r0, r21
 90c:	08 95       	ret

0000090e <__fp_round>:
 90e:	09 2e       	mov	r0, r25
 910:	03 94       	inc	r0
 912:	00 0c       	add	r0, r0
 914:	11 f4       	brne	.+4      	; 0x91a <__fp_round+0xc>
 916:	88 23       	and	r24, r24
 918:	52 f0       	brmi	.+20     	; 0x92e <__fp_round+0x20>
 91a:	bb 0f       	add	r27, r27
 91c:	40 f4       	brcc	.+16     	; 0x92e <__fp_round+0x20>
 91e:	bf 2b       	or	r27, r31
 920:	11 f4       	brne	.+4      	; 0x926 <__fp_round+0x18>
 922:	60 ff       	sbrs	r22, 0
 924:	04 c0       	rjmp	.+8      	; 0x92e <__fp_round+0x20>
 926:	6f 5f       	subi	r22, 0xFF	; 255
 928:	7f 4f       	sbci	r23, 0xFF	; 255
 92a:	8f 4f       	sbci	r24, 0xFF	; 255
 92c:	9f 4f       	sbci	r25, 0xFF	; 255
 92e:	08 95       	ret

00000930 <__fp_split3>:
 930:	57 fd       	sbrc	r21, 7
 932:	90 58       	subi	r25, 0x80	; 128
 934:	44 0f       	add	r20, r20
 936:	55 1f       	adc	r21, r21
 938:	59 f0       	breq	.+22     	; 0x950 <__fp_splitA+0x10>
 93a:	5f 3f       	cpi	r21, 0xFF	; 255
 93c:	71 f0       	breq	.+28     	; 0x95a <__fp_splitA+0x1a>
 93e:	47 95       	ror	r20

00000940 <__fp_splitA>:
 940:	88 0f       	add	r24, r24
 942:	97 fb       	bst	r25, 7
 944:	99 1f       	adc	r25, r25
 946:	61 f0       	breq	.+24     	; 0x960 <__fp_splitA+0x20>
 948:	9f 3f       	cpi	r25, 0xFF	; 255
 94a:	79 f0       	breq	.+30     	; 0x96a <__fp_splitA+0x2a>
 94c:	87 95       	ror	r24
 94e:	08 95       	ret
 950:	12 16       	cp	r1, r18
 952:	13 06       	cpc	r1, r19
 954:	14 06       	cpc	r1, r20
 956:	55 1f       	adc	r21, r21
 958:	f2 cf       	rjmp	.-28     	; 0x93e <__fp_split3+0xe>
 95a:	46 95       	lsr	r20
 95c:	f1 df       	rcall	.-30     	; 0x940 <__fp_splitA>
 95e:	08 c0       	rjmp	.+16     	; 0x970 <__fp_splitA+0x30>
 960:	16 16       	cp	r1, r22
 962:	17 06       	cpc	r1, r23
 964:	18 06       	cpc	r1, r24
 966:	99 1f       	adc	r25, r25
 968:	f1 cf       	rjmp	.-30     	; 0x94c <__fp_splitA+0xc>
 96a:	86 95       	lsr	r24
 96c:	71 05       	cpc	r23, r1
 96e:	61 05       	cpc	r22, r1
 970:	08 94       	sec
 972:	08 95       	ret

00000974 <__fp_zero>:
 974:	e8 94       	clt

00000976 <__fp_szero>:
 976:	bb 27       	eor	r27, r27
 978:	66 27       	eor	r22, r22
 97a:	77 27       	eor	r23, r23
 97c:	cb 01       	movw	r24, r22
 97e:	97 f9       	bld	r25, 7
 980:	08 95       	ret

00000982 <__mulsf3>:
 982:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__mulsf3x>
 986:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_round>
 98a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__fp_pscA>
 98e:	38 f0       	brcs	.+14     	; 0x99e <__mulsf3+0x1c>
 990:	0e 94 80 04 	call	0x900	; 0x900 <__fp_pscB>
 994:	20 f0       	brcs	.+8      	; 0x99e <__mulsf3+0x1c>
 996:	95 23       	and	r25, r21
 998:	11 f0       	breq	.+4      	; 0x99e <__mulsf3+0x1c>
 99a:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__fp_inf>
 99e:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__fp_nan>
 9a2:	11 24       	eor	r1, r1
 9a4:	0c 94 bb 04 	jmp	0x976	; 0x976 <__fp_szero>

000009a8 <__mulsf3x>:
 9a8:	0e 94 98 04 	call	0x930	; 0x930 <__fp_split3>
 9ac:	70 f3       	brcs	.-36     	; 0x98a <__mulsf3+0x8>

000009ae <__mulsf3_pse>:
 9ae:	95 9f       	mul	r25, r21
 9b0:	c1 f3       	breq	.-16     	; 0x9a2 <__mulsf3+0x20>
 9b2:	95 0f       	add	r25, r21
 9b4:	50 e0       	ldi	r21, 0x00	; 0
 9b6:	55 1f       	adc	r21, r21
 9b8:	62 9f       	mul	r22, r18
 9ba:	f0 01       	movw	r30, r0
 9bc:	72 9f       	mul	r23, r18
 9be:	bb 27       	eor	r27, r27
 9c0:	f0 0d       	add	r31, r0
 9c2:	b1 1d       	adc	r27, r1
 9c4:	63 9f       	mul	r22, r19
 9c6:	aa 27       	eor	r26, r26
 9c8:	f0 0d       	add	r31, r0
 9ca:	b1 1d       	adc	r27, r1
 9cc:	aa 1f       	adc	r26, r26
 9ce:	64 9f       	mul	r22, r20
 9d0:	66 27       	eor	r22, r22
 9d2:	b0 0d       	add	r27, r0
 9d4:	a1 1d       	adc	r26, r1
 9d6:	66 1f       	adc	r22, r22
 9d8:	82 9f       	mul	r24, r18
 9da:	22 27       	eor	r18, r18
 9dc:	b0 0d       	add	r27, r0
 9de:	a1 1d       	adc	r26, r1
 9e0:	62 1f       	adc	r22, r18
 9e2:	73 9f       	mul	r23, r19
 9e4:	b0 0d       	add	r27, r0
 9e6:	a1 1d       	adc	r26, r1
 9e8:	62 1f       	adc	r22, r18
 9ea:	83 9f       	mul	r24, r19
 9ec:	a0 0d       	add	r26, r0
 9ee:	61 1d       	adc	r22, r1
 9f0:	22 1f       	adc	r18, r18
 9f2:	74 9f       	mul	r23, r20
 9f4:	33 27       	eor	r19, r19
 9f6:	a0 0d       	add	r26, r0
 9f8:	61 1d       	adc	r22, r1
 9fa:	23 1f       	adc	r18, r19
 9fc:	84 9f       	mul	r24, r20
 9fe:	60 0d       	add	r22, r0
 a00:	21 1d       	adc	r18, r1
 a02:	82 2f       	mov	r24, r18
 a04:	76 2f       	mov	r23, r22
 a06:	6a 2f       	mov	r22, r26
 a08:	11 24       	eor	r1, r1
 a0a:	9f 57       	subi	r25, 0x7F	; 127
 a0c:	50 40       	sbci	r21, 0x00	; 0
 a0e:	9a f0       	brmi	.+38     	; 0xa36 <__mulsf3_pse+0x88>
 a10:	f1 f0       	breq	.+60     	; 0xa4e <__mulsf3_pse+0xa0>
 a12:	88 23       	and	r24, r24
 a14:	4a f0       	brmi	.+18     	; 0xa28 <__mulsf3_pse+0x7a>
 a16:	ee 0f       	add	r30, r30
 a18:	ff 1f       	adc	r31, r31
 a1a:	bb 1f       	adc	r27, r27
 a1c:	66 1f       	adc	r22, r22
 a1e:	77 1f       	adc	r23, r23
 a20:	88 1f       	adc	r24, r24
 a22:	91 50       	subi	r25, 0x01	; 1
 a24:	50 40       	sbci	r21, 0x00	; 0
 a26:	a9 f7       	brne	.-22     	; 0xa12 <__mulsf3_pse+0x64>
 a28:	9e 3f       	cpi	r25, 0xFE	; 254
 a2a:	51 05       	cpc	r21, r1
 a2c:	80 f0       	brcs	.+32     	; 0xa4e <__mulsf3_pse+0xa0>
 a2e:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__fp_inf>
 a32:	0c 94 bb 04 	jmp	0x976	; 0x976 <__fp_szero>
 a36:	5f 3f       	cpi	r21, 0xFF	; 255
 a38:	e4 f3       	brlt	.-8      	; 0xa32 <__mulsf3_pse+0x84>
 a3a:	98 3e       	cpi	r25, 0xE8	; 232
 a3c:	d4 f3       	brlt	.-12     	; 0xa32 <__mulsf3_pse+0x84>
 a3e:	86 95       	lsr	r24
 a40:	77 95       	ror	r23
 a42:	67 95       	ror	r22
 a44:	b7 95       	ror	r27
 a46:	f7 95       	ror	r31
 a48:	e7 95       	ror	r30
 a4a:	9f 5f       	subi	r25, 0xFF	; 255
 a4c:	c1 f7       	brne	.-16     	; 0xa3e <__mulsf3_pse+0x90>
 a4e:	fe 2b       	or	r31, r30
 a50:	88 0f       	add	r24, r24
 a52:	91 1d       	adc	r25, r1
 a54:	96 95       	lsr	r25
 a56:	87 95       	ror	r24
 a58:	97 f9       	bld	r25, 7
 a5a:	08 95       	ret

00000a5c <__udivmodsi4>:
 a5c:	a1 e2       	ldi	r26, 0x21	; 33
 a5e:	1a 2e       	mov	r1, r26
 a60:	aa 1b       	sub	r26, r26
 a62:	bb 1b       	sub	r27, r27
 a64:	fd 01       	movw	r30, r26
 a66:	0d c0       	rjmp	.+26     	; 0xa82 <__udivmodsi4_ep>

00000a68 <__udivmodsi4_loop>:
 a68:	aa 1f       	adc	r26, r26
 a6a:	bb 1f       	adc	r27, r27
 a6c:	ee 1f       	adc	r30, r30
 a6e:	ff 1f       	adc	r31, r31
 a70:	a2 17       	cp	r26, r18
 a72:	b3 07       	cpc	r27, r19
 a74:	e4 07       	cpc	r30, r20
 a76:	f5 07       	cpc	r31, r21
 a78:	20 f0       	brcs	.+8      	; 0xa82 <__udivmodsi4_ep>
 a7a:	a2 1b       	sub	r26, r18
 a7c:	b3 0b       	sbc	r27, r19
 a7e:	e4 0b       	sbc	r30, r20
 a80:	f5 0b       	sbc	r31, r21

00000a82 <__udivmodsi4_ep>:
 a82:	66 1f       	adc	r22, r22
 a84:	77 1f       	adc	r23, r23
 a86:	88 1f       	adc	r24, r24
 a88:	99 1f       	adc	r25, r25
 a8a:	1a 94       	dec	r1
 a8c:	69 f7       	brne	.-38     	; 0xa68 <__udivmodsi4_loop>
 a8e:	60 95       	com	r22
 a90:	70 95       	com	r23
 a92:	80 95       	com	r24
 a94:	90 95       	com	r25
 a96:	9b 01       	movw	r18, r22
 a98:	ac 01       	movw	r20, r24
 a9a:	bd 01       	movw	r22, r26
 a9c:	cf 01       	movw	r24, r30
 a9e:	08 95       	ret

00000aa0 <__mulshisi3>:
 aa0:	b7 ff       	sbrs	r27, 7
 aa2:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__muluhisi3>

00000aa6 <__mulohisi3>:
 aa6:	0e 94 58 05 	call	0xab0	; 0xab0 <__muluhisi3>
 aaa:	82 1b       	sub	r24, r18
 aac:	93 0b       	sbc	r25, r19
 aae:	08 95       	ret

00000ab0 <__muluhisi3>:
 ab0:	0e 94 63 05 	call	0xac6	; 0xac6 <__umulhisi3>
 ab4:	a5 9f       	mul	r26, r21
 ab6:	90 0d       	add	r25, r0
 ab8:	b4 9f       	mul	r27, r20
 aba:	90 0d       	add	r25, r0
 abc:	a4 9f       	mul	r26, r20
 abe:	80 0d       	add	r24, r0
 ac0:	91 1d       	adc	r25, r1
 ac2:	11 24       	eor	r1, r1
 ac4:	08 95       	ret

00000ac6 <__umulhisi3>:
 ac6:	a2 9f       	mul	r26, r18
 ac8:	b0 01       	movw	r22, r0
 aca:	b3 9f       	mul	r27, r19
 acc:	c0 01       	movw	r24, r0
 ace:	a3 9f       	mul	r26, r19
 ad0:	70 0d       	add	r23, r0
 ad2:	81 1d       	adc	r24, r1
 ad4:	11 24       	eor	r1, r1
 ad6:	91 1d       	adc	r25, r1
 ad8:	b2 9f       	mul	r27, r18
 ada:	70 0d       	add	r23, r0
 adc:	81 1d       	adc	r24, r1
 ade:	11 24       	eor	r1, r1
 ae0:	91 1d       	adc	r25, r1
 ae2:	08 95       	ret

00000ae4 <_exit>:
 ae4:	f8 94       	cli

00000ae6 <__stop_program>:
 ae6:	ff cf       	rjmp	.-2      	; 0xae6 <__stop_program>
