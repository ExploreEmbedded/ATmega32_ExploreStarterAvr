
Stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002be  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000186  00000000  00000000  000004ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ca  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d3  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d4  00000000  00000000  00000a47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00000c1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DELAY_us>:
         if 5000 is passed as the argument then it generates a delay of 5ms.		  

 ***************************************************************************************************/
void DELAY_us(uint16_t us_count) 
{
    while (us_count != 0) 
  6c:	00 97       	sbiw	r24, 0x00	; 0
  6e:	31 f0       	breq	.+12     	; 0x7c <DELAY_us+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	25 e0       	ldi	r18, 0x05	; 5
  72:	2a 95       	dec	r18
  74:	f1 f7       	brne	.-4      	; 0x72 <DELAY_us+0x6>
  76:	00 00       	nop
    {
        _delay_us(1);
		us_count--;
  78:	01 97       	sbiw	r24, 0x01	; 1
  7a:	f8 cf       	rjmp	.-16     	; 0x6c <DELAY_us>
    }
}
  7c:	08 95       	ret

0000007e <DELAY_ms>:
     It generates a delay of 1ms for each count,
     if 1000 is passed as the argument then it generates delay of 1000ms(1sec)
 ***************************************************************************************************/
void DELAY_ms(uint16_t ms_count) 
{
    while (ms_count != 0) 
  7e:	00 97       	sbiw	r24, 0x00	; 0
  80:	41 f0       	breq	.+16     	; 0x92 <DELAY_ms+0x14>
  82:	ef e9       	ldi	r30, 0x9F	; 159
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	31 97       	sbiw	r30, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <DELAY_ms+0x8>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <DELAY_ms+0xe>
  8c:	00 00       	nop
    {
        _delay_us(1000); //DELAY_us is called to generate 1ms delay
        ms_count--;
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f6 cf       	rjmp	.-20     	; 0x7e <DELAY_ms>
    }
}
  92:	08 95       	ret

00000094 <main>:
{
	

	  int x,y;
    /* Replace with your application code */
      DDRD |= (1<<5)|(1<<6)|(1<<7);
  94:	81 b3       	in	r24, 0x11	; 17
  96:	80 6e       	ori	r24, 0xE0	; 224
  98:	81 bb       	out	0x11, r24	; 17
	  PORTD &= ~(1<<5); 
  9a:	95 98       	cbi	0x12, 5	; 18
	
    while (1) 
    {
		PORTD |= (1<<6);
  9c:	96 9a       	sbi	0x12, 6	; 18
  9e:	04 e0       	ldi	r16, 0x04	; 4
  a0:	10 e0       	ldi	r17, 0x00	; 0
#define dirPin  PD6
#define Enable PD5
 

int main(void)
{
  a2:	c2 e3       	ldi	r28, 0x32	; 50
  a4:	d0 e0       	ldi	r29, 0x00	; 0
		PORTD |= (1<<6);
		for(x=0; x<4; x++)
		{
		 for(y=0; y<50; y++)
		 {
		  PORTD |=(1<<7);
  a6:	97 9a       	sbi	0x12, 7	; 18
		  DELAY_us(700);
  a8:	8c eb       	ldi	r24, 0xBC	; 188
  aa:	92 e0       	ldi	r25, 0x02	; 2
  ac:	0e 94 36 00 	call	0x6c	; 0x6c <DELAY_us>
		  PORTD &=~(1<<7);
  b0:	97 98       	cbi	0x12, 7	; 18
		   DELAY_us(700);
  b2:	8c eb       	ldi	r24, 0xBC	; 188
  b4:	92 e0       	ldi	r25, 0x02	; 2
  b6:	0e 94 36 00 	call	0x6c	; 0x6c <DELAY_us>
  ba:	21 97       	sbiw	r28, 0x01	; 1
    while (1) 
    {
		PORTD |= (1<<6);
		for(x=0; x<4; x++)
		{
		 for(y=0; y<50; y++)
  bc:	a1 f7       	brne	.-24     	; 0xa6 <main+0x12>
		  PORTD |=(1<<7);
		  DELAY_us(700);
		  PORTD &=~(1<<7);
		   DELAY_us(700);
		 }
		 DELAY_ms(1000);
  be:	88 ee       	ldi	r24, 0xE8	; 232
  c0:	93 e0       	ldi	r25, 0x03	; 3
  c2:	0e 94 3f 00 	call	0x7e	; 0x7e <DELAY_ms>
  c6:	01 50       	subi	r16, 0x01	; 1
  c8:	11 09       	sbc	r17, r1
	  PORTD &= ~(1<<5); 
	
    while (1) 
    {
		PORTD |= (1<<6);
		for(x=0; x<4; x++)
  ca:	59 f7       	brne	.-42     	; 0xa2 <main+0xe>
		   DELAY_us(700);
		 }
		 DELAY_ms(1000);
		}
		
		PORTD &= ~(1<<6);
  cc:	96 98       	cbi	0x12, 6	; 18
  ce:	04 e0       	ldi	r16, 0x04	; 4
  d0:	10 e0       	ldi	r17, 0x00	; 0
      DDRD |= (1<<5)|(1<<6)|(1<<7);
	  PORTD &= ~(1<<5); 
	
    while (1) 
    {
		PORTD |= (1<<6);
  d2:	c2 e3       	ldi	r28, 0x32	; 50
  d4:	d0 e0       	ldi	r29, 0x00	; 0
		PORTD &= ~(1<<6);
		for(x=0; x<4; x++)
		{
			for(y=0; y<50; y++)
			{
				PORTD |=(1<<7);
  d6:	97 9a       	sbi	0x12, 7	; 18
				DELAY_us(700);
  d8:	8c eb       	ldi	r24, 0xBC	; 188
  da:	92 e0       	ldi	r25, 0x02	; 2
  dc:	0e 94 36 00 	call	0x6c	; 0x6c <DELAY_us>
				PORTD &=~(1<<7);
  e0:	97 98       	cbi	0x12, 7	; 18
				DELAY_us(700);
  e2:	8c eb       	ldi	r24, 0xBC	; 188
  e4:	92 e0       	ldi	r25, 0x02	; 2
  e6:	0e 94 36 00 	call	0x6c	; 0x6c <DELAY_us>
  ea:	21 97       	sbiw	r28, 0x01	; 1
		}
		
		PORTD &= ~(1<<6);
		for(x=0; x<4; x++)
		{
			for(y=0; y<50; y++)
  ec:	a1 f7       	brne	.-24     	; 0xd6 <main+0x42>
				PORTD |=(1<<7);
				DELAY_us(700);
				PORTD &=~(1<<7);
				DELAY_us(700);
			}
			DELAY_ms(1000);
  ee:	88 ee       	ldi	r24, 0xE8	; 232
  f0:	93 e0       	ldi	r25, 0x03	; 3
  f2:	0e 94 3f 00 	call	0x7e	; 0x7e <DELAY_ms>
  f6:	01 50       	subi	r16, 0x01	; 1
  f8:	11 09       	sbc	r17, r1
		 }
		 DELAY_ms(1000);
		}
		
		PORTD &= ~(1<<6);
		for(x=0; x<4; x++)
  fa:	59 f7       	brne	.-42     	; 0xd2 <main+0x3e>
  fc:	cf cf       	rjmp	.-98     	; 0x9c <main+0x8>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
